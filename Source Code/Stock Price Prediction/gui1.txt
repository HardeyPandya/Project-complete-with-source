#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Mar 15, 2019 01:26:11 PM IST  platform: Windows NT
import sys
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk
try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import gui1_support
import matplotlib

matplotlib.use('TkAgg')

import numpy as np
import matplotlib.pyplot as plt

import sklearn.svm
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout
from keras.optimizers import Adam
from sklearn.preprocessing import MinMaxScaler
from tkinter import messagebox

import matplotlib

matplotlib.use('TkAgg')
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    gui1_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root,selected_company ,*args, **kwargs ):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (selected_company, w)
    gui1_support.init(w, top ,*args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, selected_company ,top=None):

        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "italic -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 10 -weight bold -slant roman"  \
            " -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.title(selected_company)
        top.geometry("742x645+372+12")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Canvas1 = tk.Canvas(top)
        self.Canvas1.place(relx=0.013, rely=0.016, relheight=0.687
                , relwidth=0.664)
        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(highlightbackground="#d9d9d9")
        self.Canvas1.configure(highlightcolor="black")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief='ridge')
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")
        self.Canvas1.configure(width=493)

        self.TLabel1 = ttk.Label(top)
        self.TLabel1.place(relx=0.701, rely=0.016, height=34, width=192)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="TkDefaultFont")
        self.TLabel1.configure(relief='flat')
        self.TLabel1.configure(wraplength="200")
        self.TLabel1.configure(text='''Enter the days after which you want to know the Stock Price''')

        self.TEntry1 = ttk.Entry(top)
        self.TEntry1.place(relx=0.701, rely=0.078, relheight=0.033
                , relwidth=0.17, )
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="ibeam")

        self.TButton1 = ttk.Button(top)
        self.TButton1.place(relx=0.701, rely=0.124, height=25, width=76)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''OK''',command=e2)

        self.TLabel1_1 = ttk.Label(top)
        self.TLabel1_1.place(relx=0.701, rely=0.217, height=34, width=192)
        self.TLabel1_1.configure(background="#d9d9d9")
        self.TLabel1_1.configure(foreground="#281aea")
        self.TLabel1_1.configure(font="TkDefaultFont")
        self.TLabel1_1.configure(relief='flat')
        self.TLabel1_1.configure(wraplength="200")
        self.TLabel1_1.configure(text='''Prediction using LSTM''')

        self.TEntry1_2 = ttk.Entry(top)
        self.TEntry1_2.place(relx=0.701, rely=0.264, relheight=0.033
                , relwidth=0.17)
        self.TEntry1_2.configure(takefocus="")
        self.TEntry1_2.configure(cursor="ibeam")

        self.TLabel1_2 = ttk.Label(top)
        self.TLabel1_2.place(relx=0.701, rely=0.326, height=34, width=192)
        self.TLabel1_2.configure(background="#d9d9d9")
        self.TLabel1_2.configure(foreground="#38a018")
        self.TLabel1_2.configure(font="TkDefaultFont")
        self.TLabel1_2.configure(relief='flat')
        self.TLabel1_2.configure(wraplength="200")
        self.TLabel1_2.configure(text='''Prediction using SVR''')

        self.TEntry1_3 = ttk.Entry(top)
        self.TEntry1_3.place(relx=0.701, rely=0.372, relheight=0.033
                , relwidth=0.17)
        self.TEntry1_3.configure(takefocus="")
        self.TEntry1_3.configure(cursor="ibeam")

        self.TLabel1_3 = ttk.Label(top)
        self.TLabel1_3.place(relx=0.701, rely=0.434, height=34, width=192)
        self.TLabel1_3.configure(background="#d9d9d9")
        self.TLabel1_3.configure(foreground="#ff0000")
        self.TLabel1_3.configure(font="TkDefaultFont")
        self.TLabel1_3.configure(relief='flat')
        self.TLabel1_3.configure(wraplength="200")
        self.TLabel1_3.configure(text='''Prediction using ARIMA''')

        self.TEntry1_4 = ttk.Entry(top)
        self.TEntry1_4.place(relx=0.701, rely=0.481, relheight=0.033
                , relwidth=0.17)
        self.TEntry1_4.configure(takefocus="")
        self.TEntry1_4.configure(cursor="ibeam")

        self.TLabel1_4 = ttk.Label(top)
        self.TLabel1_4.place(relx=0.701, rely=0.543, height=34, width=202)
        self.TLabel1_4.configure(background="#d9d9d9")
        self.TLabel1_4.configure(foreground="#ff5e00")
        self.TLabel1_4.configure(font="TkDefaultFont")
        self.TLabel1_4.configure(relief='flat')
        self.TLabel1_4.configure(wraplength="200")
        self.TLabel1_4.configure(text='''Prediction using Combined CNN and LSTM''')

        self.TEntry1_5 = ttk.Entry(top)
        self.TEntry1_5.place(relx=0.701, rely=0.605, relheight=0.033
                , relwidth=0.17)
        self.TEntry1_5.configure(takefocus="")
        self.TEntry1_5.configure(cursor="ibeam")

        self.TLabel1_6 = ttk.Label(top)
        self.TLabel1_6.place(relx=0.701, rely=0.667, height=34, width=62)
        self.TLabel1_6.configure(background="#d9d9d9")
        self.TLabel1_6.configure(foreground="#000000")
        self.TLabel1_6.configure(font="TkDefaultFont")
        self.TLabel1_6.configure(relief='flat')
        self.TLabel1_6.configure(wraplength="200")
        self.TLabel1_6.configure(text='''Average''')

        self.TEntry1_6 = ttk.Entry(top)
        self.TEntry1_6.place(relx=0.782, rely=0.674, relheight=0.033
                , relwidth=0.17)
        self.TEntry1_6.configure(takefocus="")
        self.TEntry1_6.configure(cursor="ibeam")

        self.TLabel1_7 = ttk.Label(top)
        self.TLabel1_7.place(relx=0.013, rely=0.713, height=34, width=152)
        self.TLabel1_7.configure(background="#d9d9d9")
        self.TLabel1_7.configure(foreground="#000000")
        self.TLabel1_7.configure(font=font9)
        self.TLabel1_7.configure(relief='flat')
        self.TLabel1_7.configure(wraplength="200")
        self.TLabel1_7.configure(text='''Sentimental Analysis''')

        self.TLabel1_8 = ttk.Label(top)
        self.TLabel1_8.place(relx=0.013, rely=0.76, height=24, width=152)
        self.TLabel1_8.configure(background="#d9d9d9")
        self.TLabel1_8.configure(foreground="#000000")
        self.TLabel1_8.configure(font="TkDefaultFont")
        self.TLabel1_8.configure(relief='flat')
        self.TLabel1_8.configure(wraplength="200")
        self.TLabel1_8.configure(text='''(Using dictionary approach)''')

        self.TLabel1_9 = ttk.Label(top)
        self.TLabel1_9.place(relx=0.013, rely=0.791, height=24, width=212)
        self.TLabel1_9.configure(background="#d9d9d9")
        self.TLabel1_9.configure(foreground="#000000")
        self.TLabel1_9.configure(font="TkDefaultFont")
        self.TLabel1_9.configure(relief='flat')
        self.TLabel1_9.configure(wraplength="300")
        self.TLabel1_9.configure(text='''(news taken from moneycontrol.com)''')

        self.TLabel1_10 = ttk.Label(top)
        self.TLabel1_10.place(relx=0.013, rely=0.853, height=24, width=92)
        self.TLabel1_10.configure(background="#d9d9d9")
        self.TLabel1_10.configure(foreground="#000000")
        self.TLabel1_10.configure(font="TkDefaultFont")
        self.TLabel1_10.configure(relief='flat')
        self.TLabel1_10.configure(wraplength="300")
        self.TLabel1_10.configure(text='''Positive Words:''')

        self.TLabel1_11 = ttk.Label(top)
        self.TLabel1_11.place(relx=0.013, rely=0.899, height=24, width=102)
        self.TLabel1_11.configure(background="#d9d9d9")
        self.TLabel1_11.configure(foreground="#000000")
        self.TLabel1_11.configure(font="TkDefaultFont")
        self.TLabel1_11.configure(relief='flat')
        self.TLabel1_11.configure(wraplength="300")
        self.TLabel1_11.configure(text='''Negative Words:''')

        self.TEntry1_10 = ttk.Entry(top)
        self.TEntry1_10.place(relx=0.148, rely=0.853, relheight=0.033
                , relwidth=0.143)
        self.TEntry1_10.configure(takefocus="")
        self.TEntry1_10.configure(cursor="ibeam")

        self.TEntry1_11 = ttk.Entry(top)
        self.TEntry1_11.place(relx=0.148, rely=0.899, relheight=0.033
                , relwidth=0.143)
        self.TEntry1_11.configure(takefocus="")
        self.TEntry1_11.configure(cursor="ibeam")

        self.TLabel1_12 = ttk.Label(top)
        self.TLabel1_12.place(relx=0.512, rely=0.713, height=34, width=152)
        self.TLabel1_12.configure(background="#d9d9d9")
        self.TLabel1_12.configure(foreground="#000000")
        self.TLabel1_12.configure(font=font9)
        self.TLabel1_12.configure(relief='flat')
        self.TLabel1_12.configure(wraplength="200")
        self.TLabel1_12.configure(text='''Technical Indicators''')

        self.TLabel1_13 = ttk.Label(top)
        self.TLabel1_13.place(relx=0.458, rely=0.76, height=24, width=92)
        self.TLabel1_13.configure(background="#d9d9d9")
        self.TLabel1_13.configure(foreground="#000000")
        self.TLabel1_13.configure(font="TkDefaultFont")
        self.TLabel1_13.configure(relief='flat')
        self.TLabel1_13.configure(wraplength="300")
        self.TLabel1_13.configure(text='''RSI:''')

        self.TEntry1_7 = ttk.Entry(top)
        self.TEntry1_7.place(relx=0.526, rely=0.76, relheight=0.033
                , relwidth=0.17)
        self.TEntry1_7.configure(takefocus="")
        self.TEntry1_7.configure(cursor="ibeam")

        self.TLabel1_6 = ttk.Label(top)
        self.TLabel1_6.place(relx=0.458, rely=0.806, height=24, width=32)
        self.TLabel1_6.configure(background="#d9d9d9")
        self.TLabel1_6.configure(foreground="#000000")
        self.TLabel1_6.configure(font="TkDefaultFont")
        self.TLabel1_6.configure(relief='flat')
        self.TLabel1_6.configure(wraplength="300")
        self.TLabel1_6.configure(text='''CCI:''')

        self.TEntry1_8 = ttk.Entry(top)
        self.TEntry1_8.place(relx=0.526, rely=0.806, relheight=0.033
                , relwidth=0.17)
        self.TEntry1_8.configure(takefocus="")
        self.TEntry1_8.configure(cursor="ibeam")

        self.TLabel1_7 = ttk.Label(top)
        self.TLabel1_7.place(relx=0.458, rely=0.853, height=24, width=32)
        self.TLabel1_7.configure(background="#d9d9d9")
        self.TLabel1_7.configure(foreground="#000000")
        self.TLabel1_7.configure(font="TkDefaultFont")
        self.TLabel1_7.configure(relief='flat')
        self.TLabel1_7.configure(wraplength="300")
        self.TLabel1_7.configure(text='''ADX:''')

        self.TEntry1_9 = ttk.Entry(top)
        self.TEntry1_9.place(relx=0.526, rely=0.853, relheight=0.033
                , relwidth=0.17)
        self.TEntry1_9.configure(takefocus="")
        self.TEntry1_9.configure(cursor="ibeam")

        self.TLabel1_8 = ttk.Label(top)
        self.TLabel1_8.place(relx=0.013, rely=0.946, height=24, width=102)
        self.TLabel1_8.configure(background="#d9d9d9")
        self.TLabel1_8.configure(foreground="#000000")
        self.TLabel1_8.configure(font=font10)
        self.TLabel1_8.configure(relief='flat')
        self.TLabel1_8.configure(wraplength="300")
        self.TLabel1_8.configure(text='''Sentiment:''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.TEntry1_12 = ttk.Entry(top)
        self.TEntry1_12.place(relx=0.148, rely=0.946, relheight=0.033
                , relwidth=0.143)
        self.TEntry1_12.configure(takefocus="")
        self.TEntry1_12.configure(cursor="ibeam")

if __name__ == '__main__' :
    vp_start_gui()

length = 0

h = None
top = None
final_svr_prediction = np.array([])
final_predicted_stock_price_lstm = []
no=0


def predict(data, root, selected_company, selected_index):
    global no
    plt.figure(no)
    plt.plot(data['Close'].values.reshape(-1, 1), color='violet', label="Original Stock price")

    training_set = np.array(data['Close'])
    training_set = training_set.reshape(-1, 1)
    global length
    length = len(training_set) + 1

    ##################################
    ## Support Vector Regression Model
    ##################################
    x_train = np.arange(1, length, 1)
    x_train = x_train.reshape(-1, 1)
    y = data['Close'].values
    clf = sklearn.svm.SVR(gamma=5e-5, C=200, epsilon=0.001, tol=0.001)
    clf.fit(x_train, training_set)

    svr_prediction = np.arange(1, length + 200, 1)
    svr_prediction = svr_prediction.reshape(-1, 1)

    global final_svr_prediction
    final_svr_prediction = clf.predict(svr_prediction)
    plt.plot(final_svr_prediction, color='green', label="Predicted Stock Price SVR")
    y = y.reshape(-1, 1)



    ###############################################
    ##ARIMA Model##################################
    ###############################################


    #################################################
    ##LSTM Model, 60 timesteps, 1 regression output##
    #################################################

    sc = MinMaxScaler(feature_range=(0, 1))
    training_set_scaled = sc.fit_transform(training_set)

    x_train = []
    y_train = []
    length = len(training_set)
    for i in range(60, length - 2):
        x_train.append(training_set_scaled[i - 60:i, 0])
        y_train.append(training_set_scaled[i, 0])
    x_train, y_train = np.array(x_train), np.array(y_train)

    x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

    regressor = Sequential()
    regressor.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
    regressor.add(Dropout(0.2))

    regressor.add(LSTM(50, return_sequences=True))
    regressor.add(Dropout(0.2))

    regressor.add(LSTM(50, return_sequences=True))
    regressor.add(Dropout(0.2))

    regressor.add(LSTM(50))
    regressor.add(Dropout(0.2))

    regressor.add(Dense(units=1))
    s = Adam(lr=0.001)
    regressor.compile(optimizer=s, loss='mean_squared_error')
    regressor.fit(x_train, y_train, epochs=10, batch_size=32)

    # Part 3 - Making the predictions and visualising the results
    x_test = training_set_scaled[0:60]
    x_test = x_test.tolist()
    x_test1 = []
    x_test1.append(x_test[0:60])
    i = 0
    global final_predicted_stock_price_lstm
    final_predicted_stock_price_lstm = []

    while i <= length + 200:
        x_test1 = np.array(x_test1)
        x_test1 = np.reshape(x_test1, (x_test1.shape[0], x_test1.shape[1], 1))
        predicted_stock_price = regressor.predict(x_test1)
        x_test1 = x_test1.tolist()
        x_temptest = x_test1[0]

        if i <= length - 2:
            x_temptest.append(training_set_scaled[i])
        else:
            x_temptest.append(predicted_stock_price[0].tolist())

        del x_test1[0][0]

        final_predicted_stock_price_lstm.append(sc.inverse_transform(predicted_stock_price))
        i = i + 1

    final_predicted_stock_price_lstm = np.array(final_predicted_stock_price_lstm)
    final_predicted_stock_price_lstm = final_predicted_stock_price_lstm.reshape(-1, 1)
    plt.plot(final_predicted_stock_price_lstm, color='blue', label='Predicted Stock Price LSTM')

    ################################
    ## GUI
    ################################
    from gui1 import create_Toplevel1
    global h
    global top
    (h, top) = create_Toplevel1(root, selected_company)
    fig = plt.figure(no)
    FigureCanvasTkAgg(fig, master=top.Canvas1).get_tk_widget().pack()
    no = no + 1

length = 0

def e2():
    global top, length
    day = int(top.TEntry1.get())
    if  day >=1 and day < 200:
        top.TEntry1_3.insert(0,final_svr_prediction[length + day])
        top.TEntry1_2.insert(0,final_predicted_stock_price_lstm[length + day])